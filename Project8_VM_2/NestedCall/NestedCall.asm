            //Output Name: NestedCall/NestedCall.asm
            //BootStrapping: True
            //Bootstrapping
@256
D=A
@SP
M=D
@1
D=A
@LCL
M=D
@2
D=A
@ARG
M=D
@3
D=A
@THIS
M=D
@4
D=A
@THAT
M=D
            //Call Sys.init provoding 0 arguments
@_BOOTSRAP$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(_BOOTSRAP$ret.0)
        //Main code body below
         //Function Sys.init
(Sys.init)
            // push constant 4000
@4000
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop pointer 0
@SP
M=M-1
A=M
D=M
@3
M=D
            // push constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
            //Call Sys.main provoding 0 arguments
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.main
0;JMP
(Sys.init$ret.0)
            // pop temp 1
@SP
M=M-1
A=M
D=M
@6
M=D
(Sys.init.LOOP)
@Sys.init.LOOP
0;JMP
         //Function Sys.main
(Sys.main)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
            // push constant 4001
@4001
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop pointer 0
@SP
M=M-1
A=M
D=M
@3
M=D
            // push constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
            // push constant 200
@200
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop LCL 1
@LCL
D=M
@1
D=D+A
@SP
A=M
M=D
@SP
M=M-1
A=M
D=M
A=A+1
A=M
M=D
            // push constant 40
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop LCL 2
@LCL
D=M
@2
D=D+A
@SP
A=M
M=D
@SP
M=M-1
A=M
D=M
A=A+1
A=M
M=D
            // push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop LCL 3
@LCL
D=M
@3
D=D+A
@SP
A=M
M=D
@SP
M=M-1
A=M
D=M
A=A+1
A=M
M=D
            // push constant 123
@123
D=A
@SP
A=M
M=D
@SP
M=M+1
            //Call Sys.add12 provoding 1 arguments
@Sys.main$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.add12
0;JMP
(Sys.main$ret.0)
            // pop temp 0
@SP
M=M-1
A=M
D=M
@5
M=D
            // push LCL 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
            // push LCL 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
            // push LCL 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
            // push LCL 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
            // push LCL 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
// add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
// add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
// add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
         // Return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
M=0
@R14
D=M
M=0
A=D
0;JMP
         //Function Sys.add12
(Sys.add12)
            // push constant 4002
@4002
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop pointer 0
@SP
M=M-1
A=M
D=M
@3
M=D
            // push constant 5002
@5002
D=A
@SP
A=M
M=D
@SP
M=M+1
            // pop pointer 1
@SP
M=M-1
A=M
D=M
@4
M=D
            // push ARG 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
            // push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
         // Return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
M=0
@R14
D=M
M=0
A=D
0;JMP
